<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR_0001" xml:space="preserve">
    <value>Can't interweave '{0}': The aspect already defines an introduction method for interface method {1}.</value>
  </data>
  <data name="ERR_0002" xml:space="preserve">
    <value>Invalid aspect parameter '{0}' in method '{1}': An unspecified aspect parameter is not allowed.</value>
  </data>
  <data name="ERR_0003" xml:space="preserve">
    <value>Can't interweave '{0}': The target class '{1}' already defines the interface {2}. Try option '{3}' to resolve this.</value>
  </data>
  <data name="ERR_0004" xml:space="preserve">
    <value>Invalid aspect parameter '{0}' in method '{1}': '{3}' is not allowed in this context.</value>
  </data>
  <data name="ERR_0005" xml:space="preserve">
    <value>Invalid aspect parameter '{0}' in method '{1}': The expected type was '{2}'.</value>
  </data>
  <data name="ERR_0006" xml:space="preserve">
    <value>Invalid aspect method '{0}': There is more than one aspect-method attribute defined</value>
  </data>
  <data name="ERR_0007" xml:space="preserve">
    <value>Only interfaces can be introduced.</value>
  </data>
  <data name="ERR_0008" xml:space="preserve">
    <value>Invalid aspect method '{0}': initializers are expected to be 'void'</value>
  </data>
  <data name="ERR_0009" xml:space="preserve">
    <value>{0} introduces interface {1} but doesn't implement method {2}.</value>
  </data>
  <data name="ERR_0010" xml:space="preserve">
    <value>Invalid parameter declaration in method {0}.{1}: The aspect parameter {2} could occour only at the beginning of the parameter list.</value>
  </data>
  <data name="ERR_0011" xml:space="preserve">
    <value>The aspect method '{0}' mustn't return a value: Aspect methods except some Advice.Around and Advice.AfterThrowing methods are expected to be 'void'.</value>
  </data>
  <data name="ERR_0012" xml:space="preserve">
    <value>The aspect method '{0}' mustn't return '{1}': The return type of {2} methods (annotated with pointcut attributes) is expected to be a generic type.</value>
    <comment>bei [Create(Advice.Around)]</comment>
  </data>
  <data name="ERR_0013" xml:space="preserve">
    <value>Can't interweave {0} with aspect {1}: The following aspect methods have undecidable pointcuts:\n{2}</value>
  </data>
  <data name="ERR_0014" xml:space="preserve">
    <value>The aspect-method '{0}' tries to introduce the private interface '{1}'. Introductions are only allowed for public interfaces.</value>
  </data>
  <data name="ERR_0015" xml:space="preserve">
    <value>Invalid parameter declaration in aspect method '{0}': Aspect methods using the Destroy attribute are expected to be parameterless. Only Aspect parameter attributes are allowed.</value>
  </data>
  <data name="ERR_0016" xml:space="preserve">
    <value>Wrong visiblity of join-point variable '{0}': The visibility change in {1} to '{2}' is not allowed.</value>
  </data>
  <data name="ERR_0017" xml:space="preserve">
    <value>Invalid use of the join-point variable scope 'Override': Cannot override non-existing target class member '{0}' using join-point variable '{0}' on aspect method {1}.</value>
  </data>
  <data name="ERR_0018" xml:space="preserve">
    <value>Inconsistent visibility of the join-point variable '{0}': The scope of '{0}' was defined different on multiple aspect methods. Error occured at {1}.</value>
  </data>
  <data name="ERR_0019" xml:space="preserve">
    <value>Illegal combination of Scopes for join-point variable '{0}' at {1}.</value>
  </data>
  <data name="ERR_0020" xml:space="preserve">
    <value>Invalid type of join-point variable '{0}' in '{1}': The expected type was '{2}' and was declared in '{3}'.</value>
  </data>
  <data name="ERR_0021" xml:space="preserve">
    <value>Invalid parameter '{0}' in '{1}': A local join-point variable is not allowed for [Create] Advices.</value>
  </data>
  <data name="ERR_0022" xml:space="preserve">
    <value>The aspect method '{0}' has conflicting return type constraints. The declared return type and the aspect parameter type of [JPRetVal] have to be identical.  </value>
  </data>
  <data name="ERR_0023" xml:space="preserve">
    <value>This attribute is no longer supported. Go to the documentation for further information.</value>
  </data>
  <data name="ERR_0024" xml:space="preserve">
    <value>Aspect {0} has a invalid XML configuration: {1}.</value>
  </data>
  <data name="ERR_0025" xml:space="preserve">
    <value>Invalid configuration: Unable to resolve type '{0}' in assembly '{1}'.</value>
  </data>
  <data name="ERR_9000" xml:space="preserve">
    <value>Internal Error.</value>
  </data>
  <data name="ERR_9001" xml:space="preserve">
    <value>Invalid operation.</value>
  </data>
  <data name="ERR_9002" xml:space="preserve">
    <value>No overload of the method or constructor takes the following arguments: {0}</value>
  </data>
  <data name="ERR_9003" xml:space="preserve">
    <value>Can't invoke target method: The parameter count doesn't match.</value>
  </data>
  <data name="ERR_9010" xml:space="preserve">
    <value>User defined [Error] on join point {0}: {1}</value>
  </data>
</root>